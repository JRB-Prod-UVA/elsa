-- Basic logic functions
let true  = \x y -> x
let false = \x y -> y

-- Definition of the first four church numbers
let c0 = \f x -> x
let c1 = \f x -> f x
let c2 = \f x -> f (f x)
let c3 = \f x -> f (f (f x))

-- Extra numbers for question a (some very long predefined numbers)
let c13 = \f x -> f (f (f (f (f (f (f (f (f (f (f (f (f x))))))))))))
let c21 = \f x -> f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f x))))))))))))))))))))
let c34 = \f x -> f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f (f x)))))))))))))))))))))))))))))))))

-- The only number operation we need
let add = \m n f x -> m f (n f x)

-- Our 'pair' constructor is compatible with the 'true' and 'false' functions
let pair = \x y f -> f x y
let fst  = true
let snd  = false

-- Homework a: Create a lambda function that, given a pair with two
-- numbers as arguments, generates a new pair that looks like this:
-- Input : nextfib (\f -> f num1 num2)
-- Output: \f -> f num2 (num1 + num2)
-- Note that this is a fundamental part of a fibonacci generator
-- Show that if we reduce the term in normal order, we arrive at
-- a weak normal form after three reductions

-- Solution for the fibonacci number generator
let nextfib = \p -> pair (p snd) (add (p fst) (p snd))

-- Reduction proof:
eval tenth_fibonacci:
  nextfib (pair c13 c21)
  =d> (\p -> pair (p snd) (add (p fst) (p snd))) (pair c13 c21)
  =n> pair ((pair c13 c21) snd) (add ((pair c13 c21) fst) ((pair c13 c21) snd))
  =d> (\x y f -> f x y) ((pair c13 c21) snd) (add ((pair c13 c21) fst) ((pair c13 c21) snd))
  =n> (\y f -> f ((pair c13 c21) snd) y) (add ((pair c13 c21) fst) ((pair c13 c21) snd))
  =n:w> \f -> f ((pair c13 c21) snd) (add ((pair c13 c21) fst) ((pair c13 c21) snd)) -- Weak normal form check
  =n*> \f -> f c21 (add ((pair c13 c21) fst) ((pair c13 c21) snd))
  =p*> \f -> f c21 (add c13 ((pair c13 c21) snd))
  =*> \f -> f c21 (add c13 c21)
  =p*> \f -> f c21 c34

-- Homework b: Now create a function that creates a list where each number is
-- part of the fibonacci sequence. Prove the first five fibonacci numbers
-- Show that (at least) the list after the first calculated number is in weak
-- normal form
-- In short, proof that the list will look like this:
-- \f -> f c0 (\f -> f c1 (\f -> f c1 (\f -> f c2 (\f -> f c3 ...))))

-- Solution to the recursive list generator
let Y     = \g -> (\x -> g(x x)) (\x -> g(x x))
let fibs  = \fib n m -> pair n (fib m (add n m))
let Yfibs = (\x -> fibs(x x)) (\x -> fibs(x x))

-- Function arguments, for convenience
let arg1 = add c0 c1
let arg2 = add c1 arg1
let arg3 = add arg1 arg2
let arg4 = add arg2 arg3
let arg5 = add arg3 arg4

conf first_five_fibonacci:
  (Y fibs) c0 c1
  =n*> Yfibs c0 c1
  =n*> pair c0 (Yfibs c1 arg1)
  =n*:w> \f -> f c0 (Yfibs c1 arg1)
  =n*:w> \f -> f c0 (\f -> f c1 (Yfibs arg1 arg2))
  =n*:w> \f -> f c0 (\f -> f c1 (\f -> f c1 (Yfibs arg2 arg3)))
  =n*:w> \f -> f c0 (\f -> f c1 (\f -> f c1 (\f -> f c2 (Yfibs arg3 arg4))))
  =n*:w> \f -> f c0 (\f -> f c1 (\f -> f c1 (\f -> f c2 (\f -> f c3 (Yfibs arg4 arg5)))))